上传GIT
git config --global user.name "Your Name"
git config --global user.email "email@example.com"
1.进入项目 git init
2.添加到本地仓库 git add .(或指定文件)
3.提交 git commit -m '此次修改注释'

//git status 时刻掌握仓库当前状态，了解哪些文件做了修改

//git diff 查看具体做了何种修改

git status、git diff 在 git commit 之前查看

git log(git log --pretty=oneline) 查看文件修改的历史记录(从最近到最远)

git reset --hard HEAD^(HEAD代表当前版本,HEAD^代表当前版本的上个版本)回到上个版本
git reset --hard 版本号 回到指定版本号的版本

git reflog 来查看使用的每条指令

工作区:在电脑上能看到的目录，如文件夹就是一个工作区

工作区中内容add后进入版本库的stage暂存区,从暂存区commit后加入到当前分支master,即所有需要提交的文件统统放到暂存区,而后一次性提交暂存区内容,
当暂存区内容commit后,暂存区就没有任何内容了

Git跟踪并管理的是修改，而非文件。

git diff HEAD -- readme.txt命令可以查看工作区和版本库里面最新版本的区别
注:git commit只会提交暂存区中的修改,未add的修改则不会提交

git checkout -- 文件名  直接丢弃工作区的修改(版本库版本放至工作区)

git reset HEAD file可以把暂存区的修改撤销掉,重新放回工作区

git rm 文件名  删除文件

4.本地仓库关联到github上 git remote add origin 地址
5.git pull origin master
6.上传 git push -u origin master


Vue

建立项目：
npm install -g vue

npm install -g vue-cli

vue init webpack 项目名称

（项目下）
npm install

npm run dev

npm install vue-router --save

npm install vue-resource

引入组件：
import 组件名称 from './components/组件文件'
components: {组件名称}
push:插到最后
unshift:插到第一个
修改Vue.set(要改的数组，要改的项数，要改成啥)
标签属性绑定：v-bind:属性名=属性值
v-if会从文档流删除
v-show通过display





组件：
根组件：在入口文件（main.js）通过实例化Vue对象中的render方法引入根组件
而且只有一个实例化对象Vue
import 子组件 from 子组件路径
组件名在html标签里转小写中线格式，属性也采用该格式，大小写不敏感



父子组件通信：

父子组件通信:父-->子 props属性

父组件中自定义属性

在子组件声明props:[父组件中自定义属性名](-小写)，在作为{{}}中变量时改驼峰

子-->父 event事件(emit触发，on监听)

@子组件事件(click等)="自定义事件" ====>  methods:{该自定义事件(){ this.$emit(给父组件的规定的自定义事件, 子组件要告诉父组件的东西) }}

父组件中 @子组件给规定的自定义事件=父组件自定义事件

methods:{父组件自定义事件(接收子组件传过来的东西的变量){}}

在父组件中的子组件里需要添加html模板内容时，在子组件中用<slot></slot>容器接收

给子组件中的slot一个name属性，在父组件模板内容一个slot属性，两者一致时即为向指定插槽中插入内容

动态组件
:is="变量"，变量:要引入的组件名，在data中声明




过渡效果

<transition name="动画效果名称"></transition>（默认先新后旧，mode="in-out"）

CSS过渡：
            enter                                      leave
name-enter  ----->  name-enter-active     name-leave  ------>  name-leave-active
   无       ----->          有                有      ------>         无

name-enter-active,name-leave-active	过渡中transition:all .5s ease-out;
name-enter,name-leave-active	最终状态的css

transform:translateY(500px);

接受过渡v-if,v-show
过渡元素标签一样时必须加key属性才可正常执行动画

JS过渡

自定义指令
directives:{
  指令名(使用时v-指令名):(el, binding) => {
    el.style.color = binding.value
  }
}
当写在当前组件时只能在当前组件使用，若写在new Vue()实例化时，整个项目可用

<router-link></router-link>

main.js中配置路由
import VRouter from 'vue-router'
import VueResource from 'vue-resource'
import Vuex from 'vuex'

Vue.use(VRouter)
Vue.use(VueResource)
Vue.use(Vuex)

app.vue 中<router-view></router-view>接收路由内容


公共模板(layout.vue)放在src --> components --> layout.vue
分页面  src --> pages --> 分页面

插件

Vue.use(插件变量名)


AJAX

npm install vue-resource


const apiServer = jsonServer.create()

const apiRouter = jsonServer.router('db.json')

const middlewares = jsonServer.defaults()


apiServer.use(middlewares)

apiServer.use(apiRouter)

apiServer.listen(3000, () => {
  console.log('JSON Server is running')
})